library(tidyverse)
install.packages('tidyverse',dependencies = T)
library(tidyverse)
install.packages(c('scales','colorspace','lazyeval','jsonlite','readr','png','tidyverse','readxl',
'BiocGenerics', 'BiocInstaller', 'Biostrings', 'data.table', 'feather', 'IRanges', 'robustbase', 'S4Vectors',
'slam', 'sourcetools', 'survival', 'XVector', 'zlibbioc','devtools','xlsx','xml2','mixOmics','AppliedPredictiveModeling',
'pheatmap','gridExtra','corrplot','XML'),
dependencies = T)
source("https://bioconductor.org/biocLite.R")
biocLite(c("xcms",'Biostrings','KEGGREST','CAMERA','sva'))
library(devtools)
install_github('danielbraas/MetabFUN')
install.packages('stringi', dependencies = T)
library(tidyverse)
install.packages('stringi')
install.packages('stringi', dependencies = T)
install.packages('stringi', dependencies = T)
install.packages('C:/Users/Daniel/Downloads/stringi_1.2.4.tar.gz', repos = NULL, type="source")
R CMD INSTALL --no-lock <pkg>
install.packages("stringi", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
library(stringi)
library(devtools)
install_github('danielbraas/MetabFUN')
install.packages(c("callr", "cli", "commonmark", "CORElearn", "covr", "data.table", "devtools", "digest", "dimRed", "doParallel", "dplyr", "egg", "evaluate", "fansi", "ggplot2", "htmlwidgets", "ipred", "later", "lattice", "lintr", "magic", "MASS", "Matrix", "mgcv", "mime", "ModelMetrics", "nanotime", "pkgbuild", "pkgconfig", "pkgload", "pls", "processx", "R.rsp", "R.utils", "R6", "Rcpp", "RcppCCTZ", "reprex", "reshape", "rlang", "robustbase", "roxygen2", "rstudioapi", "shiny", "snow", "survival", "testthat", "tidyr", "tidyselect", "tinytex", "TTR", "webshot", "xfun", "XML", "xtable", "xts", "zoo"))
install.packages('XLConnect')
library(XLConnect)
help(package='XLConnect')
system('powershell -command "netstat -an"')
system('powershell -command "netstat -ab"')
library(xml2)
test <- read_html('https://rdpguard.com/free-whois.aspx?ip=104.193.83.157#')
test
xml_contents()
xml_contents(test)
xml_text(test)
library(tidyverse)
library(XLConnect)
install.packages('tidyverse', dependencies = T)
library(tidyverse)
library(tidyverse)
library(openxlsx)
install.packages('openxlsx', dependencies = T)
library(openxlsx)
wb <- createWorkbook()
help(package=='openxlsx')
help(package='openxlsx')
mergeCells(wb, 'merging', cols=1:10, rows = 1:2)
addWorksheet(wb, 'merging')
mergeCells(wb, 'merging', cols=1:10, rows = 1:2)
writeData(wb, 'merging', x = 'This is a text that needs merging')
?writeData()
hs <- createStyle(border='TopBottomLeftRight', haligh = 'center', valign = 'center')
hs <- createStyle(border='TopBottomLeftRight', halign = 'center', valign = 'center')
writeData(wb, 'merging', x = 'This is a text that needs merging', headerStyle = hs)
saveWorkbook(wb, 'Merger.xlsx', overwrite = T)
setwd("C:/Users/Daniel/Dropbox/R_projects/xlsx_from_R")
wb <- createWorkbook()
addWorksheet(wb, 'merging')
mergeCells(wb, 'merging', cols=1:10, rows = 1:2)
hs <- createStyle(border='TopBottomLeftRight', halign = 'center', valign = 'center')
writeData(wb, 'merging', x = 'This is a text that needs merging', headerStyle = hs)
saveWorkbook(wb, 'Merger.xlsx', overwrite = T)
wb <- createWorkbook()
addWorksheet(wb, 'merging')
mergeCells(wb, 'merging', cols=1:10, rows = 1:2)
hs <- createStyle(border='TopBottomLeftRight', halign = 'center', valign = 'center', bgFill = 'Grey90')
writeData(wb, 'merging', x = 'This is a text that needs merging', headerStyle = hs)
saveWorkbook(wb, 'Merger.xlsx', overwrite = T)
hs <- createStyle(border='TopBottomLeftRight', halign = 'center', valign = 'center', bgFill = 'Grey80')
hs <- createStyle(border='TopBottomLeftRight', halign = 'center', valign = 'center', bgFill = 'grey90')
wb <- createWorkbook()
addWorksheet(wb, 'merging')
mergeCells(wb, 'merging', cols=1:10, rows = 1:2)
hs <- createStyle(border='TopBottomLeftRight', halign = 'center', valign = 'center', bgFill = 'grey90')
writeData(wb, 'merging', x = 'This is a text that needs merging', headerStyle = hs)
saveWorkbook(wb, 'Merger.xlsx', overwrite = T)
?mergeCells
wb <- createWorkbook()
addWorksheet(wb, 'merging')
mergeCells(wb, 'merging', cols=1:10, rows = 1:2)
wb <- createWorkbook()
addWorksheet(wb, 'merging')
hs <- createStyle(border='TopBottomLeftRight', halign = 'center', valign = 'center', bgFill = 'grey90')
writeData(wb, 'merging', x = 'This is a text that needs merging', headerStyle = hs)
mergeCells(wb, 'merging', cols=1:10, rows = 1:2)
saveWorkbook(wb, 'Merger.xlsx', overwrite = T)
wb <- createWorkbook()
addWorksheet(wb, 'merging')
mergeCells(wb, 'merging', cols=1:10, rows = 1:2)
writeData(wb, 'merging', x = 'This is a text that needs merging')
hs <- createStyle(border='TopBottomLeftRight', halign = 'center', valign = 'center', bgFill = 'grey90')
addStyle(wb, 'merging', style = hs, rows =1, cols = 1)
saveWorkbook(wb, 'Merger.xlsx', overwrite = T)
colors()[grep('grey', colors())]
plot(1,1, pch=19, col='grey10')
plot(1,1, pch=19, col='grey90')
wb <- createWorkbook()
addWorksheet(wb, 'merging')
mergeCells(wb, 'merging', cols=1:10, rows = 1:2)
writeData(wb, 'merging', x = 'This is a text that needs merging')
hs <- createStyle(border='TopBottomLeftRight', halign = 'center', valign = 'center', fgFill = 'grey90')
addStyle(wb, 'merging', style = hs, rows =1, cols = 1)
saveWorkbook(wb, 'Merger.xlsx', overwrite = T)
wb <- createWorkbook()
addWorksheet(wb, 'merging')
mergeCells(wb, 'merging', cols=1:10, rows = 1:2)
writeData(wb, 'merging', x = 'This is a text that needs merging')
hs <- createStyle(border=c("top", "bottom", "left", "right"), halign = 'center', valign = 'center', fgFill = 'grey90')
addStyle(wb, 'merging', style = hs, rows =1, cols = 1)
saveWorkbook(wb, 'Merger.xlsx', overwrite = T)
wb <- createWorkbook()
addWorksheet(wb, 'merging')
mergeCells(wb, 'merging', cols=1:10, rows = 1:2)
writeData(wb, 'merging', x = 'This is a text that needs merging')
hs <- createStyle(border=c("top", "bottom", "left", "right"), halign = 'center', valign = 'center', fgFill = 'grey90', fontSize = 20,
borderStyle = 'medium', textDecoration = c('bold','italic'))
addStyle(wb, 'merging', style = hs, rows =1, cols = 1)
saveWorkbook(wb, 'Merger.xlsx', overwrite = T)
